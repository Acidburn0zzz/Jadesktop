#!/usr/bin/python
try:
    from j import AK

except Exception as err:
    print("Ops something went wrong: " + str(err))

import subprocess
import sys
import os
import pwd
import xdg.Menu
import xdg.DesktopEntry
import gi
gi.require_version('Gio', '2.0')
gi.require_version('Gtk', '3.0')
gi.require_version('WebKit2', '4.0')
from gi.repository import Gtk, WebKit2, GLib, GObject, Gio, Gdk

Application=Gio.Application.new ("com.jade.desktop", Gio.ApplicationFlags.FLAGS_NONE)
Application.register()

userName = pwd.getpwuid(os.getuid())[4]
userName = userName.replace(",", " ")
path = os.path.dirname(os.path.realpath(__file__))

def diskUsage():
    contents = []
    getDiskUsage = os.popen('df --total')
    for entry in getDiskUsage:
        if entry.startswith("total"):
            contents.append(entry)
            percentage = contents[0].split("%")[0].strip().split(" ")[-1].strip()
            diskusage = "<div style='font-size: 12px;'>Storage</div>" + "<div style='font-size: 18px;padding: 1px;'>" + percentage + "%</div><div style='font-size: 12px;'>Used</div>"
            return diskusage


with open(path + '/ui.html', 'r') as file:
    html = file.read()

def fetchIcon(iconName):

    iconNotFound = "image-missing"
    iconTheme = Gtk.IconTheme.get_default()

    if iconName.endswith(".png" or ".svg"):

        if iconName.endswith(".png" or ".svg") and iconName.startswith("/"):
            return iconName # if img's come with full icon path we just return them.

        # if img's come with icon name and extension but no path, lets fix that.
        elif iconName.endswith(".png" or ".svg") and not iconName.startswith("/"):

            if iconName.endswith(".png"):
                iconName = iconName.replace(".png", "")

            elif iconName.endswith(".svg"):
                iconName = iconName.replace(".svg", "")

    # xpm not suported by webkit dont load.
    elif iconName.endswith(".xpm"):
        iconName = iconNotFound

    else:
        checkicon = iconTheme.has_icon(iconName)

        if checkicon:
            pass

        elif iconName is not None:
            print("Icon Not found in this theme --> " + iconName)
            iconName = iconNotFound

        iconTheme = iconTheme.lookup_icon(iconName, 64, 0)
        iconName = iconTheme.get_filename()# if iconName != None else None # temporary fix for icon not found

    return iconName

##  icon names ##

dashboardIcon            = fetchIcon("app-launcher")
favoriteApplicationsIcon = fetchIcon("emblem-favorite")
recentUsedFilesIcon      = fetchIcon("document-open-recent")
browserIcon              = fetchIcon("browser")
FileManagerIcon          = fetchIcon("file-manager")
softwareInstallerIcon    = fetchIcon("org.gnome.Software")
settings                 = fetchIcon("system-settings")
terminalIcon             = fetchIcon("deepin-terminal")  #TODO need a generic name
userIcon                 = fetchIcon("system-users")
logoutIcon               = fetchIcon("system-log-out")
shutdownIcon             = fetchIcon("system-shutdown")
rebootIcon               = fetchIcon("system-reboot")
hibernateIcon            = fetchIcon("system-hibernate")
suspendIcon              = fetchIcon("system-suspend")
sleepIcon                = fetchIcon("system-hibernate")
distributorLogoIcon      = fetchIcon("distributor-logo-manjaro")  #TODO need a generic name
searchIcon               = fetchIcon("search")

ui_html_contents = '''%s''' % (html % (
    dashboardIcon,
    diskUsage(),
    favoriteApplicationsIcon,
    recentUsedFilesIcon,
    browserIcon,
    FileManagerIcon,
    softwareInstallerIcon,
    settings,
    terminalIcon,
    userName,
    userIcon,
    logoutIcon,
    shutdownIcon,
    rebootIcon,
    hibernateIcon,
    suspendIcon,
    sleepIcon,
    distributorLogoIcon,
))

AK.Api.html = ui_html_contents
AK.Api.html += "<div id='search-icon'><img src='%s'></div>" % searchIcon


def jade_build_menu(application_category, depth=0):

    categoryName = application_category.getName()
    category = categoryName.lower().replace(" ", "-")
    categoryIconName = application_category.getIcon()
    category_description = application_category.getComment()

    if depth == 0:
        pass

    else:

        categoryIcon = fetchIcon(categoryIconName)

        AK.Api.html += "<div id='%s" % (
            category) + "-msg' class='category-msg'><h5>%s<br>%s</h5><img class='category-icon %s' src='%s'></div>" % (
            category, category_description, categoryName, categoryIcon)
        AK.Api.html += "<div id='%s' class='category-container row'>" % category

        tag = "li"
        if categoryName == "Settings":
            tag = "div"

        AK.Api.html += "<" + tag + " class='application-category %s'><a href='#' onclick=\"display('#%s, #%s-msg ');grid('#%s');\">" % (
            category, category, category, category) + categoryName + "</a></" + tag + ">"

    depth += 1
    for entry in application_category.getEntries():
        if isinstance(entry, xdg.Menu.Menu):
            jade_build_menu(entry, depth)

        elif isinstance(entry, xdg.Menu.MenuEntry):
            terminal = entry.DesktopEntry.getTerminal()
            if terminal == "true":
                pass
            else:
                app_exec = entry.DesktopEntry.getExec()
                app_icon = entry.DesktopEntry.getIcon()
                app_exec = app_exec.split('%')[0].strip()

                app_id = entry.DesktopEntry.getName()
                app_name = app_id

                app_id = app_id.lower()
                app_id = app_id.replace(" ", "-")
                app_id = app_id.replace(")", " ")
                app_id = app_id.replace("(", " ")
                app_id = app_id.replace("/", "-")
                generic_name = entry.DesktopEntry.getGenericName()
                app_comment = entry.DesktopEntry.getComment()
                # keywords = entry.DesktopEntry.getKeywords()

                # print(keywords)

                AK.Api.html += "<div class='application-wrapper col l4 xl3' id='%s'>" % app_id
                AK.Api.html += "<a class='application-box card'  onclick='notifySend(\"Launching %s\");' href = 'shell:%s'>" % (app_name, app_exec)
                AK.Api.html += "<img class='application-icon' src='%s'>" % fetchIcon(app_icon)
                AK.Api.html += "<img class='info-icon' src='%s'>" % fetchIcon("help-faq")
                AK.Api.html += "<h5 class='application-name card'>%s</h5>" % app_name

                if app_comment == "":
                    app_comment = "Description not available."

                if generic_name == "":
                    generic_name = "Generic name not available."

                AK.Api.html += "<p class='application-comment'>Application description:<br>%s<br><br>%s</p></a></div>" % (
                    generic_name, app_comment)

    AK.Api.html += "</div>"


def menu():# /etc/xdg/menus
    applications = xdg.Menu.parse('/etc/xdg/menus/jade-applications.menu')
    jade_build_menu(applications)


menu()


def recentlyUsed():
    recentManager = Gtk.RecentManager.get_default()

    recent_html = ""
    for item in recentManager.get_items():
        itemName = item.get_uri().split("/")[-1].strip()
        itemPath = item.get_uri()
        uri = "xdg-open:" + itemPath
        recent_html += "<div class='used-container-files col l4 xl3 center'><a href = ' " + uri + "'><img src='%s'><div class='filename'>" % (
            fetchIcon("emblem-documents")) + itemName + "</div></a></div>"

        # content_type = Gio.content_type_from_mime_type(mime)
        # icon = Gio.content_type_get_icon(content_type)
        # AK.Api.html += "<a href = ' " + uri + "'><img src='%s'><h6>"  % (fetchIcon("font")) + itemName +"<h6></a>"

        # print(icon)

    return recent_html




AK.Api.html += "</body></html>"


class Jade(AK.AppWindow):
    def __init__(self):
        super(Jade, self).__init__()

        def on_decide_policy(webview, decision, decision_type):

            if decision_type == WebKit2.PolicyDecisionType.NAVIGATION_ACTION:

                navigation_action = decision.get_navigation_action()
                navigation_request = navigation_action.get_request()
                navigation_type = navigation_action.get_navigation_type()
                uri = navigation_request.get_uri()

                def execute_command(uri):
                    subprocess.Popen(uri, shell=True)
                    decision.ignore()
                    return True

                if uri.startswith("shell:"):
                    uri = uri.replace('shell:', '')
                    execute_command(uri)

                elif uri.startswith("xdg-open:"):
                    uri = uri.replace('xdg-open:', 'xdg-open ')
                    execute_command(uri)

            return False

        def on_title_changed(webview, title):

                titleName = webview.get_title()

                if titleName.startswith("notify:"):
                    msg = titleName.replace('notify:', '')
                    Notification = Gio.Notification.new("Desktop")
                    Notification.set_title("JADE Says...")
                    Notification.set_body(msg)
                    icon = Gio.ThemedIcon.new("dialog-information")
                    Notification.set_icon(icon)
                    Notification.set_priority(1)
                    Application.send_notification(None, Notification)
                    
                elif titleName.startswith("recent"):
                	  recent_html = recentlyUsed()
                	  self.webview.run_javascript('$("#recently-used-files .row").html("' + recent_html + '");')

        self.webview.connect("notify::title", on_title_changed)
        self.webview.connect("decide-policy", on_decide_policy)
        settings = self.webview.get_settings()
        settings.set_enable_smooth_scrolling(self)


w = Jade()
w.add(Jade())
w.connect('destroy', Gtk.main_quit)
w.show_all()
Gtk.main()

recentlyUsed()